// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Stores the paying sponsors from the website
model Sponsor {
  id              String    @id @default(cuid())
  email           String    @unique
  stripeCustomerId String   @unique
  subscriptionTier String   // e.g., "Friend", "Family"
  createdAt       DateTime  @default(now())
  accessCodes     AccessCode[]
}

// The unique codes that sponsors give to users
model AccessCode {
  id        String    @id @default(cuid())
  code      String    @unique // The actual code, e.g., ET-XXXX-XXXX
  status    String    @default("NEW") // "NEW", "USED"
  sponsorId String
  sponsor   Sponsor   @relation(fields: [sponsorId], references: [id])
  usedBy    User?
  usedAt    DateTime? // When the code was redeemed
  createdAt DateTime  @default(now())
}

// The end-users on Telegram
model User {
  id          String      @id @default(cuid())
  telegramId  BigInt      @unique // Telegram IDs can be very large
  quotaGpt    Int         @default(0)
  quotaFetch  Int         @default(0)
  accessCodeId String?    @unique
  accessCode  AccessCode? @relation(fields: [accessCodeId], references: [id])
  createdAt   DateTime    @default(now())
  lastActive  DateTime    @default(now())
  usageLogs   UsageLog[]
  enrollments CourseEnrollment[]
  certificates Certificate[]
}

// Track usage for analytics and monitoring
model UsageLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String   // "gpt_request", "fetch_request", "redeem_code"
  details    Json?    // Additional data like prompt length, URL, etc.
  createdAt  DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([action, createdAt])
}

// Track course enrollments and progress
model CourseEnrollment {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  courseId         String   // "fundamentals", "chatgpt_mastery", "ai_business", "digital_literacy"
  enrolledAt       DateTime @default(now())
  completedAt      DateTime?
  currentModule    String?  // Current module like "1.1", "2.3", etc.
  completedModules Json     @default("[]") // Array of completed module IDs
  quizScore        Int?     // Final quiz score (0-100)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Store issued certificates
model Certificate {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  courseId     String   // "fundamentals", "chatgpt_mastery", "ai_business", "digital_literacy"
  certificateId String  @unique // Unique certificate number like "AFC-2025-001234"
  issuedAt     DateTime @default(now())
  score        Int?     // Final score if applicable
  validatedAt  DateTime? // When certificate was validated/verified
  
  @@index([userId])
  @@index([courseId])
  @@index([certificateId])
}